{
  "abstract" : [
    {
      "text" : "Returns a subsequence from the start of the collection up to, but not",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "including, the specified position.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/com.okta.mobile.oktaidx\/documentation\/OktaIdx",
        "doc:\/\/com.okta.mobile.oktaidx\/documentation\/OktaIdx\/Response\/Message\/Collection",
        "doc:\/\/com.okta.mobile.oktaidx\/documentation\/OktaIdx\/Response\/Message\/Collection\/Collection-Implementations"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/com.okta.mobile.oktaidx\/documentation\/OktaIdx\/Response\/Message\/Collection\/prefix(upTo:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "extendedModule" : "Swift",
    "externalID" : "s:SlsE6prefix4upTo11SubSequenceQz5IndexQz_tF::SYNTHESIZED::s:7OktaIdx8ResponseC7MessageC10CollectionC",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "prefix"
      },
      {
        "kind" : "text",
        "text" : "("
      },
      {
        "kind" : "externalParam",
        "text" : "upTo"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Self"
      },
      {
        "kind" : "text",
        "text" : "."
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Index"
      },
      {
        "kind" : "text",
        "text" : ") -> "
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Self"
      },
      {
        "kind" : "text",
        "text" : "."
      },
      {
        "kind" : "typeIdentifier",
        "text" : "SubSequence"
      }
    ],
    "modules" : [
      {
        "name" : "OktaIdx"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "prefix(upTo:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "prefix"
            },
            {
              "kind" : "text",
              "text" : "("
            },
            {
              "kind" : "externalParam",
              "text" : "upTo"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "internalParam",
              "text" : "end"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Self"
            },
            {
              "kind" : "text",
              "text" : "."
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Index"
            },
            {
              "kind" : "text",
              "text" : ") -> "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Self"
            },
            {
              "kind" : "text",
              "text" : "."
            },
            {
              "kind" : "typeIdentifier",
              "text" : "SubSequence"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "return-value",
          "level" : 2,
          "text" : "Return Value",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A subsequence up to, but not including, the ",
              "type" : "text"
            },
            {
              "code" : "end",
              "type" : "codeVoice"
            },
            {
              "text" : " position.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    },
    {
      "kind" : "parameters",
      "parameters" : [
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The “past the end” index of the resulting subsequence.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "end",
                  "type" : "codeVoice"
                },
                {
                  "text" : " must be a valid index of the collection.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "end"
        }
      ]
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The resulting subsequence ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "does not include",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " the element at the position",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "end",
              "type" : "codeVoice"
            },
            {
              "text" : ". The following example searches for the index of the number ",
              "type" : "text"
            },
            {
              "code" : "40",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in an array of integers, and then prints the prefix of the array up to,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but not including, that index:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let numbers = [10, 20, 30, 40, 50, 60]",
            "if let i = numbers.firstIndex(of: 40) {",
            "    print(numbers.prefix(upTo: i))",
            "}",
            "\/\/ Prints \"[10, 20, 30]\""
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Passing the collection’s starting index as the ",
              "type" : "text"
            },
            {
              "code" : "end",
              "type" : "codeVoice"
            },
            {
              "text" : " parameter results in",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an empty subsequence.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(numbers.prefix(upTo: numbers.startIndex))",
            "\/\/ Prints \"[]\""
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Using the ",
              "type" : "text"
            },
            {
              "code" : "prefix(upTo:)",
              "type" : "codeVoice"
            },
            {
              "text" : " method is equivalent to using a partial",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "half-open range as the collection’s subscript. The subscript notation is",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "preferred over ",
              "type" : "text"
            },
            {
              "code" : "prefix(upTo:)",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let i = numbers.firstIndex(of: 40) {",
            "    print(numbers[..<i])",
            "}",
            "\/\/ Prints \"[10, 20, 30]\""
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "O(1)",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Complexity",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 2,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/oktaidx\/response\/message\/collection\/prefix(upto:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://com.okta.mobile.oktaidx/documentation/OktaIdx": {
  "abstract" : [
    {
      "text" : "Authenticate users using policy-driven native authentication with the Okta Identity Engine.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/com.okta.mobile.oktaidx\/documentation\/OktaIdx",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "OktaIdx",
  "type" : "topic",
  "url" : "\/documentation\/oktaidx"
},
"doc://com.okta.mobile.oktaidx/documentation/OktaIdx/Response/Message/Collection": {
  "abstract" : [
    {
      "text" : "Represents a collection of messages.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Collection"
    }
  ],
  "identifier" : "doc:\/\/com.okta.mobile.oktaidx\/documentation\/OktaIdx\/Response\/Message\/Collection",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Collection"
    }
  ],
  "role" : "symbol",
  "title" : "Response.Message.Collection",
  "type" : "topic",
  "url" : "\/documentation\/oktaidx\/response\/message\/collection"
},
"doc://com.okta.mobile.oktaidx/documentation/OktaIdx/Response/Message/Collection/Collection-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/com.okta.mobile.oktaidx\/documentation\/OktaIdx\/Response\/Message\/Collection\/Collection-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Collection Implementations",
  "type" : "topic",
  "url" : "\/documentation\/oktaidx\/response\/message\/collection\/collection-implementations"
},
"doc://com.okta.mobile.oktaidx/documentation/OktaIdx/Response/Message/Collection/prefix(upTo:)": {
  "abstract" : [
    {
      "text" : "Returns a subsequence from the start of the collection up to, but not",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "including, the specified position.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "prefix"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "upTo"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Index"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "text" : "SubSequence"
    }
  ],
  "identifier" : "doc:\/\/com.okta.mobile.oktaidx\/documentation\/OktaIdx\/Response\/Message\/Collection\/prefix(upTo:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "prefix(upTo:)",
  "type" : "topic",
  "url" : "\/documentation\/oktaidx\/response\/message\/collection\/prefix(upto:)"
}
}
}