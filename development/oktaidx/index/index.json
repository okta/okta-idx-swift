{
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Essentials",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Essentials",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/start(options:)",
                "title" : "func start(options: [InteractionCodeFlow.Option : Any]?) async throws -> Response",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/resume()",
                "title" : "func resume() async throws -> Response",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/exchangecode(redirect:)",
                "title" : "func exchangeCode(redirect: URL) async throws -> Token",
                "type" : "method"
              },
              {
                "title" : "Completion Block Functions",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/start(options:completion:)",
                "title" : "func start(options: [InteractionCodeFlow.Option : Any]?, completion: InteractionCodeFlow.ResponseResult)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/resume(completion:)",
                "title" : "func resume(completion: InteractionCodeFlow.ResponseResult?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/exchangecode(redirect:completion:)",
                "title" : "func exchangeCode(redirect: URL, completion: InteractionCodeFlow.TokenResult?)",
                "type" : "method"
              },
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/context-swift.struct\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/context-swift.struct\/init(interactionhandle:state:)",
                    "title" : "init(interactionHandle: String, state: String?) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/context-swift.struct\/interactionhandle",
                    "title" : "let interactionHandle: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/context-swift.struct\/pkce",
                    "title" : "let pkce: PKCE",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/context-swift.struct\/state",
                    "title" : "let state: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/interactioncodeflow\/context-swift.struct\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/context-swift.struct\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/context-swift.struct",
                "title" : "InteractionCodeFlow.Context",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/init()",
                "title" : "convenience init() throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/init(issuer:clientid:scopes:redirecturi:additionalparameters:deviceidentifier:)",
                "title" : "convenience init(issuer: URL, clientId: String, scopes: String, redirectUri: URL, additionalParameters: [String : String]?, deviceIdentifier: UUID?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/init(plist:)",
                "title" : "convenience init(plist: URL) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/init(redirecturi:additionalparameters:deviceidentifier:client:)",
                "title" : "init(redirectUri: URL, additionalParameters: [String : String]?, deviceIdentifier: UUID?, client: OAuth2Client)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/additionalparameters",
                "title" : "let additionalParameters: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/client",
                "title" : "let client: OAuth2Client",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/context-swift.property",
                "title" : "var context: InteractionCodeFlow.Context?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/delegatecollection",
                "title" : "let delegateCollection: DelegateCollection<any InteractionCodeFlowDelegate>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/deviceidentifier",
                "title" : "let deviceIdentifier: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/isauthenticating",
                "title" : "var isAuthenticating: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/options",
                "title" : "var options: [InteractionCodeFlow.Option : Any]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/redirecturi",
                "title" : "let redirectUri: URL",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/cancel()",
                "title" : "func cancel()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/redirectresult(for:)",
                "title" : "func redirectResult(for: URL) -> InteractionCodeFlow.RedirectResult",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/reset()",
                "title" : "func reset()",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/responseresult",
                "title" : "InteractionCodeFlow.ResponseResult",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/tokenresult",
                "title" : "InteractionCodeFlow.TokenResult",
                "type" : "typealias"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/option\/omitdevicetoken",
                    "title" : "case omitDeviceToken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/option\/recoverytoken",
                    "title" : "case recoveryToken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/option\/state",
                    "title" : "case state",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/option\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/interactioncodeflow\/option\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/option\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/interactioncodeflow\/option\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/interactioncodeflow\/option\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/option\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/option",
                "title" : "InteractionCodeFlow.Option",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/redirectresult\/authenticated",
                    "title" : "case authenticated",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/redirectresult\/invalidcontext",
                    "title" : "case invalidContext",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/redirectresult\/invalidredirecturl",
                    "title" : "case invalidRedirectUrl",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/redirectresult\/remediationrequired",
                    "title" : "case remediationRequired",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/interactioncodeflow\/redirectresult\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/redirectresult\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/redirectresult",
                "title" : "InteractionCodeFlow.RedirectResult",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/api(client:didsend:received:)",
                    "title" : "func api(client: any APIClient, didSend: URLRequest, received: HTTPURLResponse)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/api(client:didsend:received:requestid:ratelimit:)",
                    "title" : "func api(client: any APIClient, didSend: URLRequest, received: APIClientError, requestId: String?, rateLimit: APIRateLimit?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/api(client:shouldretry:)",
                    "title" : "func api(client: any APIClient, shouldRetry: URLRequest) -> APIRetry",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/api(client:willsend:)",
                    "title" : "func api(client: any APIClient, willSend: inout URLRequest)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/apiclientdelegate-implementations",
                "title" : "APIClientDelegate Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/oauth(client:didrefresh:replacedwith:)",
                    "title" : "func oauth(client: OAuth2Client, didRefresh: Token, replacedWith: Token?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/oauth(client:willrefresh:)",
                    "title" : "func oauth(client: OAuth2Client, willRefresh: Token)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/oauth2clientdelegate-implementations",
                "title" : "OAuth2ClientDelegate Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/add(delegate:)",
                    "title" : "func add(delegate: Self.Delegate)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/remove(delegate:)",
                    "title" : "func remove(delegate: Self.Delegate)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflow\/delegate",
                    "title" : "InteractionCodeFlow.Delegate",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/interactioncodeflow\/usesdelegatecollection-implementations",
                "title" : "UsesDelegateCollection Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/interactioncodeflow",
            "title" : "InteractionCodeFlow",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowdelegate\/authentication(flow:received:)-37qdd",
                "title" : "func authentication<Flow>(flow: Flow, received: Response)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowdelegate\/authentication(flow:received:)-38ps0",
                "title" : "func authentication<Flow>(flow: Flow, received: Token)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowdelegate\/authentication(flow:received:)-70tl6",
                "title" : "func authentication<Flow>(flow: Flow, received: InteractionCodeFlowError)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowdelegate\/authenticationfinished(flow:)",
                "title" : "func authenticationFinished<Flow>(flow: Flow)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowdelegate\/authenticationstarted(flow:)",
                "title" : "func authenticationStarted<Flow>(flow: Flow)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/oktaidx\/interactioncodeflowdelegate",
            "title" : "InteractionCodeFlowDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/app",
                "title" : "let app: Response.Application?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/authenticators",
                "title" : "let authenticators: Authenticator.Collection",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/cancancel",
                "title" : "let canCancel: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/expiresat",
                "title" : "let expiresAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/intent-swift.property",
                "title" : "let intent: Response.Intent",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/isloginsuccessful",
                "title" : "let isLoginSuccessful: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/messages",
                "title" : "let messages: Response.Message.Collection",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/remediations",
                "title" : "let remediations: Remediation.Collection",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/user-swift.property",
                "title" : "let user: Response.User?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/cancel()",
                "title" : "func cancel() async throws -> Response",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/cancel(completion:)",
                "title" : "func cancel(completion: InteractionCodeFlow.ResponseResult?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/exchangecode()",
                "title" : "func exchangeCode() async throws -> Token",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/exchangecode(completion:)",
                "title" : "func exchangeCode(completion: InteractionCodeFlow.TokenResult?)",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/credentialenrollment",
                    "title" : "case credentialEnrollment",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/credentialmodify",
                    "title" : "case credentialModify",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/credentialrecovery",
                    "title" : "case credentialRecovery",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/credentialunenrollment",
                    "title" : "case credentialUnenrollment",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/enrollnewuser",
                    "title" : "case enrollNewUser",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/login",
                    "title" : "case login",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/unknown",
                    "title" : "case unknown",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/init(string:)",
                    "title" : "init(string: String?)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum",
                "title" : "Response.Intent",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/oktaidx\/response",
            "title" : "Response",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Classes",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/collection\/subscript(_:)-319h",
                    "title" : "subscript(String) -> Remediation?",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/collection\/subscript(_:)-56ryu",
                    "title" : "subscript(Remediation.RemediationType) -> Remediation?",
                    "type" : "subscript"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/count",
                        "title" : "var count: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/endindex",
                        "title" : "var endIndex: Remediation.Collection.Index",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/first",
                        "title" : "var first: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/indices",
                        "title" : "var indices: DefaultIndices<Self>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/startindex",
                        "title" : "var startIndex: Remediation.Collection.Index",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/distance(from:to:)",
                        "title" : "func distance(from: Self.Index, to: Self.Index) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/drop(while:)",
                        "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/droplast(_:)",
                        "title" : "func dropLast(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/firstindex(of:)",
                        "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/firstindex(where:)",
                        "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/firstrange(of:)",
                        "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/formindex(_:offsetby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/formindex(_:offsetby:limitedby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/formindex(after:)",
                        "title" : "func formIndex(after: inout Self.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/index(_:offsetby:)",
                        "title" : "func index(Self.Index, offsetBy: Int) -> Self.Index",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/index(_:offsetby:limitedby:)",
                        "title" : "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/index(after:)",
                        "title" : "func index(after: Remediation.Collection.Index) -> Remediation.Collection.Index",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/index(of:)",
                        "title" : "func index(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/makeiterator()",
                        "title" : "func makeIterator() -> IndexingIterator<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/map(_:)-8nw2r",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/prefix(_:)",
                        "title" : "func prefix(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/prefix(through:)",
                        "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/prefix(upto:)",
                        "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/randomelement()",
                        "title" : "func randomElement() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/randomelement(using:)",
                        "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/ranges(of:)",
                        "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/split(separator:maxsplits:omittingemptysubsequences:)",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/suffix(_:)",
                        "title" : "func suffix(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/suffix(from:)",
                        "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/trimmingprefix(_:)",
                        "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/trimmingprefix(while:)",
                        "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "title" : "Subscripts",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/subscript(_:)-5n5ht",
                        "title" : "subscript(Remediation.Collection.Index) -> Remediation.Collection.Element",
                        "type" : "subscript"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/subscript(_:)-6f1ac",
                        "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                        "type" : "subscript"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/subscript(_:)-91qsx",
                        "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                        "type" : "subscript"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/subscript(_:)-c3c1",
                        "title" : "subscript<R>(R) -> Self.SubSequence",
                        "type" : "subscript"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/index",
                        "title" : "Remediation.Collection.Index",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/oktaidx\/remediation\/collection\/collection-implementations",
                    "title" : "Collection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/lazy",
                        "title" : "var lazy: LazySequence<Self>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/publisher",
                        "title" : "var publisher: Publishers.Sequence<Self, Never>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/compactmap(_:)",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/compare(_:_:)",
                        "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/contains(_:)",
                        "title" : "func contains(Self.Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/elementsequal(_:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/filter(_:)-1ch01",
                        "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/filter(_:)-7k64h",
                        "title" : "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/flatmap(_:)-2bc9s",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/flatmap(_:)-6ou0k",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/formatted(_:)",
                        "title" : "func formatted<S>(S) -> S.FormatOutput",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/map(_:)-9hg4k",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/reversed()",
                        "title" : "func reversed() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/sorted(using:)-3sggy",
                        "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/sorted(using:)-5hwpa",
                        "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/starts(with:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/collection\/element",
                        "title" : "Remediation.Collection.Element",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/oktaidx\/remediation\/collection\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/remediation\/collection",
                "title" : "Remediation.Collection",
                "type" : "class"
              },
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/==(_:_:)",
                "title" : "static func == (Remediation, Remediation) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/authenticators",
                "title" : "var authenticators: Authenticator.Collection",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/capabilities",
                "title" : "let capabilities: [any RemediationCapability]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.property",
                "title" : "let form: Remediation.Form",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/messages",
                "title" : "var messages: Response.Message.Collection",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/name",
                "title" : "let name: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/pollable",
                "title" : "var pollable: Capability.Pollable?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/socialidp",
                "title" : "var socialIdp: Capability.SocialIDP?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/type",
                "title" : "let type: Remediation.RemediationType",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/hash(into:)",
                "title" : "func hash(into: inout Hasher)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/proceed()",
                "title" : "func proceed() async throws -> Response",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/proceed(completion:)",
                "title" : "func proceed(completion: InteractionCodeFlow.ResponseResult?)",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/subscript(_:)",
                "title" : "subscript(String) -> Remediation.Form.Field?",
                "type" : "subscript"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/adminconsent",
                    "title" : "case adminConsent",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/authenticatorenrollmentdata",
                    "title" : "case authenticatorEnrollmentData",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/authenticatorverificationdata",
                    "title" : "case authenticatorVerificationData",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/cancel",
                    "title" : "case cancel",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/cancelpolling",
                    "title" : "case cancelPolling",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/canceltransaction",
                    "title" : "case cancelTransaction",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/challengeauthenticator",
                    "title" : "case challengeAuthenticator",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/challengepoll",
                    "title" : "case challengePoll",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/consent",
                    "title" : "case consent",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/deviceapplessoextension",
                    "title" : "case deviceAppleSsoExtension",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/devicechallengepoll",
                    "title" : "case deviceChallengePoll",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/emailchallengeconsent",
                    "title" : "case emailChallengeConsent",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/enrollauthenticator",
                    "title" : "case enrollAuthenticator",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/enrollpoll",
                    "title" : "case enrollPoll",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/enrollprofile",
                    "title" : "case enrollProfile",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/enrollmentchanneldata",
                    "title" : "case enrollmentChannelData",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/identify",
                    "title" : "case identify",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/identifyrecovery",
                    "title" : "case identifyRecovery",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/launchauthenticator",
                    "title" : "case launchAuthenticator",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/poll",
                    "title" : "case poll",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/recover",
                    "title" : "case recover",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/redirectidp",
                    "title" : "case redirectIdp",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/reenrollauthenticator",
                    "title" : "case reenrollAuthenticator",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/reenrollauthenticatorwarning",
                    "title" : "case reenrollAuthenticatorWarning",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/requestactivationemail",
                    "title" : "case requestActivationEmail",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/resend",
                    "title" : "case resend",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/resendchallenge",
                    "title" : "case resendChallenge",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/resetauthenticator",
                    "title" : "case resetAuthenticator",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/selectauthenticatorauthenticate",
                    "title" : "case selectAuthenticatorAuthenticate",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/selectauthenticatorenroll",
                    "title" : "case selectAuthenticatorEnroll",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/selectauthenticatorunlockaccount",
                    "title" : "case selectAuthenticatorUnlockAccount",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/selectenrollprofile",
                    "title" : "case selectEnrollProfile",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/selectenrollmentchannel",
                    "title" : "case selectEnrollmentChannel",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/selectidentify",
                    "title" : "case selectIdentify",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/send",
                    "title" : "case send",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/sendchallenge",
                    "title" : "case sendChallenge",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/skip",
                    "title" : "case skip",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/unknown",
                    "title" : "case unknown",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/unlockaccount",
                    "title" : "case unlockAccount",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/usercode",
                    "title" : "case userCode",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/oktaidx\/remediation\/remediationtype\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/remediation\/remediationtype",
                "title" : "Remediation.RemediationType",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/capability(_:)",
                    "title" : "func capability<T>(T.Type) -> T?",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/capabilitytype",
                    "title" : "Remediation.CapabilityType",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/remediation\/capabilitycollection-implementations",
                "title" : "CapabilityCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/remediation\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/remediation",
            "title" : "Remediation",
            "type" : "class"
          },
          {
            "title" : "Forms and Fields",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/fields",
                "title" : "let fields: [Remediation.Form.Field]",
                "type" : "property"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/subscript(_:)-6l1ji",
                "title" : "subscript(String) -> Remediation.Form.Field?",
                "type" : "subscript"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/subscript(_:)-8cdmz",
                "title" : "subscript(Int) -> Remediation.Form.Field?",
                "type" : "subscript"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/count",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/endindex",
                    "title" : "var endIndex: Remediation.Form.Index",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/first",
                    "title" : "var first: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/indices",
                    "title" : "var indices: DefaultIndices<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/startindex",
                    "title" : "var startIndex: Remediation.Form.Index",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/distance(from:to:)",
                    "title" : "func distance(from: Self.Index, to: Self.Index) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/firstindex(of:)",
                    "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/firstrange(of:)",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/formindex(after:)",
                    "title" : "func formIndex(after: inout Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/index(_:offsetby:)",
                    "title" : "func index(Self.Index, offsetBy: Int) -> Self.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/index(after:)",
                    "title" : "func index(after: Remediation.Form.Index) -> Remediation.Form.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/index(of:)",
                    "title" : "func index(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/makeiterator()",
                    "title" : "func makeIterator() -> IndexingIterator<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/map(_:)-1blvv",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/ranges(of:)",
                    "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/trimmingprefix(_:)",
                    "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/trimmingprefix(while:)",
                    "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/subscript(_:)-4f8g5",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/subscript(_:)-7xd5j",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/subscript(_:)-ii7e",
                    "title" : "subscript(Remediation.Form.Index) -> Remediation.Form.Element",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/subscript(_:)-vl01",
                    "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                    "type" : "subscript"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/index",
                    "title" : "Remediation.Form.Index",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/publisher",
                    "title" : "var publisher: Publishers.Sequence<Self, Never>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/compare(_:_:)",
                    "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/contains(_:)",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/filter(_:)-2xn85",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/filter(_:)-6wpzm",
                    "title" : "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/flatmap(_:)-3rm4x",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/flatmap(_:)-4sikf",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/formatted(_:)",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/map(_:)-5jj6s",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/sorted(using:)-68jsj",
                    "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/sorted(using:)-697y4",
                    "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/element",
                    "title" : "Remediation.Form.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class",
            "title" : "Remediation.Form",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/field\/authenticator",
                "title" : "var authenticator: Authenticator?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/field\/form",
                "title" : "let form: Remediation.Form?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/field\/ismutable",
                "title" : "let isMutable: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/field\/isrequired",
                "title" : "let isRequired: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/field\/issecret",
                "title" : "let isSecret: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/field\/isselectedoption",
                "title" : "var isSelectedOption: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/field\/label",
                "title" : "let label: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/field\/messages",
                "title" : "let messages: Response.Message.Collection",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/field\/name",
                "title" : "let name: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/field\/options",
                "title" : "let options: [Remediation.Form.Field]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/field\/selectedoption",
                "title" : "var selectedOption: Remediation.Form.Field?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/field\/type",
                "title" : "let type: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/field\/value",
                "title" : "var value: (any APIRequestArgument)?",
                "type" : "property"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/field\/subscript(_:)",
                "title" : "subscript(String) -> Remediation.Form.Field?",
                "type" : "subscript"
              }
            ],
            "path" : "\/documentation\/oktaidx\/remediation\/form-swift.class\/field",
            "title" : "Remediation.Form.Field",
            "type" : "class"
          },
          {
            "title" : "Working with Authenticators",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/==(_:_:)",
                "title" : "static func == (Authenticator, Authenticator) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/capabilities",
                "title" : "let capabilities: [any AuthenticatorCapability]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/displayname",
                "title" : "let displayName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/duo",
                "title" : "var duo: Capability.Duo?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/id",
                "title" : "let id: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/key",
                "title" : "let key: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/methods",
                "title" : "let methods: [Authenticator.Method]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/numberchallenge",
                "title" : "var numberChallenge: Capability.NumberChallenge?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/otp",
                "title" : "var otp: Capability.OTP?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/passwordsettings",
                "title" : "var passwordSettings: Capability.PasswordSettings?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/pollable",
                "title" : "var pollable: Capability.Pollable?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/profile",
                "title" : "var profile: Capability.Profile?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/recoverable",
                "title" : "var recoverable: Capability.Recoverable?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/resendable",
                "title" : "var resendable: Capability.Resendable?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/sendable",
                "title" : "var sendable: Capability.Sendable?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.property",
                "title" : "let state: Authenticator.State",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/type",
                "title" : "let type: Authenticator.Kind",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/capability(_:)",
                    "title" : "func capability<T>(T.Type) -> T?",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/capabilitytype",
                    "title" : "Authenticator.CapabilityType",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/authenticator\/capabilitycollection-implementations",
                "title" : "CapabilityCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/authenticator\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/authenticator",
            "title" : "Authenticator",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/collection\/current",
                "title" : "var current: Authenticator?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/collection\/enrolled",
                "title" : "var enrolled: [Authenticator]",
                "type" : "property"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/collection\/subscript(_:)-qp7f",
                "title" : "subscript(Authenticator.Kind) -> Authenticator?",
                "type" : "subscript"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/count",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/endindex",
                    "title" : "var endIndex: Authenticator.Collection.Index",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/first",
                    "title" : "var first: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/indices",
                    "title" : "var indices: DefaultIndices<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/startindex",
                    "title" : "var startIndex: Authenticator.Collection.Index",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/distance(from:to:)",
                    "title" : "func distance(from: Self.Index, to: Self.Index) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/firstindex(of:)",
                    "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/firstrange(of:)",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/formindex(after:)",
                    "title" : "func formIndex(after: inout Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/index(_:offsetby:)",
                    "title" : "func index(Self.Index, offsetBy: Int) -> Self.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/index(after:)",
                    "title" : "func index(after: Authenticator.Collection.Index) -> Authenticator.Collection.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/index(of:)",
                    "title" : "func index(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/makeiterator()",
                    "title" : "func makeIterator() -> IndexingIterator<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/map(_:)-6mfq1",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/ranges(of:)",
                    "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/trimmingprefix(_:)",
                    "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/trimmingprefix(while:)",
                    "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/subscript(_:)-26ces",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/subscript(_:)-45ozl",
                    "title" : "subscript(Authenticator.Collection.Index) -> Authenticator.Collection.Element",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/subscript(_:)-8f08e",
                    "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/subscript(_:)-8wmn2",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/index",
                    "title" : "Authenticator.Collection.Index",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/authenticator\/collection\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/publisher",
                    "title" : "var publisher: Publishers.Sequence<Self, Never>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/compare(_:_:)",
                    "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/contains(_:)",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/filter(_:)-1uzwo",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/filter(_:)-3sa5x",
                    "title" : "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/flatmap(_:)-1p7bl",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/flatmap(_:)-8xhjv",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/formatted(_:)",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/map(_:)-1bhli",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/sorted(using:)-48ucc",
                    "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/sorted(using:)-60ee6",
                    "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/collection\/element",
                    "title" : "Authenticator.Collection.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/authenticator\/collection\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/authenticator\/collection",
            "title" : "Authenticator.Collection",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/kind\/app",
                "title" : "case app",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/kind\/device",
                "title" : "case device",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/kind\/email",
                "title" : "case email",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/kind\/federated",
                "title" : "case federated",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/kind\/password",
                "title" : "case password",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/kind\/phone",
                "title" : "case phone",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/kind\/securitykey",
                "title" : "case securityKey",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/kind\/securityquestion",
                "title" : "case securityQuestion",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/kind\/unknown",
                "title" : "case unknown",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/kind\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/authenticator\/kind\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/authenticator\/kind",
            "title" : "Authenticator.Kind",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/method\/duo",
                "title" : "case duo",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/method\/email",
                "title" : "case email",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/method\/federated",
                "title" : "case federated",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/method\/idp",
                "title" : "case idp",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/method\/otp",
                "title" : "case otp",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/method\/password",
                "title" : "case password",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/method\/push",
                "title" : "case push",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/method\/securityquestion",
                "title" : "case securityQuestion",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/method\/signednonce",
                "title" : "case signedNonce",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/method\/sms",
                "title" : "case sms",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/method\/totp",
                "title" : "case totp",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/method\/unknown",
                "title" : "case unknown",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/method\/voice",
                "title" : "case voice",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/method\/webauthn",
                "title" : "case webAuthN",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/method\/stringvalue",
                "title" : "var stringValue: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/method\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/authenticator\/method\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/authenticator\/method",
            "title" : "Authenticator.Method",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.enum\/authenticating",
                "title" : "case authenticating",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.enum\/enrolled",
                "title" : "case enrolled",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.enum\/enrolling",
                "title" : "case enrolling",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.enum\/normal",
                "title" : "case normal",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.enum\/recovery",
                "title" : "case recovery",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.enum\/'...(_:)-27cmt",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.enum\/'...(_:)-359xw",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.enum\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.enum\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.enum\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.enum\/_(_:_:)",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.enum\/_=(_:_:)-89np0",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.enum\/_=(_:_:)-8lap2",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.enum\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.enum\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.enum\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/authenticator\/state-swift.enum",
            "title" : "Authenticator.State",
            "type" : "enum"
          },
          {
            "title" : "Working with Responses",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/app",
                "title" : "let app: Response.Application?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/authenticators",
                "title" : "let authenticators: Authenticator.Collection",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/cancancel",
                "title" : "let canCancel: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/expiresat",
                "title" : "let expiresAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/intent-swift.property",
                "title" : "let intent: Response.Intent",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/isloginsuccessful",
                "title" : "let isLoginSuccessful: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/messages",
                "title" : "let messages: Response.Message.Collection",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/remediations",
                "title" : "let remediations: Remediation.Collection",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/user-swift.property",
                "title" : "let user: Response.User?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/cancel()",
                "title" : "func cancel() async throws -> Response",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/cancel(completion:)",
                "title" : "func cancel(completion: InteractionCodeFlow.ResponseResult?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/exchangecode()",
                "title" : "func exchangeCode() async throws -> Token",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/exchangecode(completion:)",
                "title" : "func exchangeCode(completion: InteractionCodeFlow.TokenResult?)",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/credentialenrollment",
                    "title" : "case credentialEnrollment",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/credentialmodify",
                    "title" : "case credentialModify",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/credentialrecovery",
                    "title" : "case credentialRecovery",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/credentialunenrollment",
                    "title" : "case credentialUnenrollment",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/enrollnewuser",
                    "title" : "case enrollNewUser",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/login",
                    "title" : "case login",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/unknown",
                    "title" : "case unknown",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/init(string:)",
                    "title" : "init(string: String?)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/response\/intent-swift.enum",
                "title" : "Response.Intent",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/oktaidx\/response",
            "title" : "Response",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/message\/==(_:_:)",
                "title" : "static func == (Response.Message, Response.Message) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/message\/field",
                "title" : "var field: Remediation.Form.Field?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/message\/localizationkey",
                "title" : "let localizationKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/message\/message",
                "title" : "let message: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/message\/type",
                "title" : "let type: Response.Message.Severity",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/message\/hash(into:)",
                "title" : "func hash(into: inout Hasher)",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/severity\/error",
                    "title" : "case error",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/severity\/info",
                    "title" : "case info",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/severity\/unknown",
                    "title" : "case unknown",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/response\/message\/severity\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/oktaidx\/response\/message\/severity\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/response\/message\/severity",
                "title" : "Response.Message.Severity",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/response\/message\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/response\/message",
            "title" : "Response.Message",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/message\/collection\/==(_:_:)",
                "title" : "static func == (Response.Message.Collection, Response.Message.Collection) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/message\/collection\/allmessages",
                "title" : "var allMessages: [Response.Message]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/message\/collection\/hash(into:)",
                "title" : "func hash(into: inout Hasher)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/message\/collection\/message(for:)-5p58e",
                "title" : "func message(for: String) -> Response.Message?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/message\/collection\/message(for:)-9kg5a",
                "title" : "func message(for: Remediation.Form.Field) -> Response.Message?",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/count",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/endindex",
                    "title" : "var endIndex: Response.Message.Collection.Index",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/first",
                    "title" : "var first: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/indices",
                    "title" : "var indices: DefaultIndices<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/startindex",
                    "title" : "var startIndex: Response.Message.Collection.Index",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/distance(from:to:)",
                    "title" : "func distance(from: Self.Index, to: Self.Index) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/firstindex(of:)",
                    "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/firstrange(of:)",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/formindex(after:)",
                    "title" : "func formIndex(after: inout Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/index(_:offsetby:)",
                    "title" : "func index(Self.Index, offsetBy: Int) -> Self.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/index(after:)",
                    "title" : "func index(after: Response.Message.Collection.Index) -> Response.Message.Collection.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/index(of:)",
                    "title" : "func index(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/makeiterator()",
                    "title" : "func makeIterator() -> IndexingIterator<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/map(_:)-7m0du",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/ranges(of:)",
                    "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/trimmingprefix(_:)",
                    "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/trimmingprefix(while:)",
                    "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/subscript(_:)",
                    "title" : "subscript(Response.Message.Collection.Index) -> Response.Message.Collection.Element",
                    "type" : "subscript"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/index",
                    "title" : "Response.Message.Collection.Index",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/response\/message\/collection\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/response\/message\/collection\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/publisher",
                    "title" : "var publisher: Publishers.Sequence<Self, Never>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/compare(_:_:)",
                    "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/contains(_:)",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/filter(_:)-8fjrv",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/filter(_:)-8kl1f",
                    "title" : "func filter(Predicate<Self.Element>) throws -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/flatmap(_:)-3vt45",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/flatmap(_:)-6jrtz",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/formatted(_:)",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/map(_:)-2xq0t",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/sorted(using:)-81u2j",
                    "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/sorted(using:)-8o2xz",
                    "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/message\/collection\/element",
                    "title" : "Response.Message.Collection.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/response\/message\/collection\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/response\/message\/collection",
            "title" : "Response.Message.Collection",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/application\/id",
                "title" : "let id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/application\/label",
                "title" : "let label: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/application\/name",
                "title" : "let name: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/oktaidx\/response\/application",
            "title" : "Response.Application",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/user-swift.struct\/profile-swift.struct\/firstname",
                    "title" : "let firstName: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/user-swift.struct\/profile-swift.struct\/lastname",
                    "title" : "let lastName: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/user-swift.struct\/profile-swift.struct\/locale",
                    "title" : "let locale: Locale?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/response\/user-swift.struct\/profile-swift.struct\/timezone",
                    "title" : "let timeZone: TimeZone?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/response\/user-swift.struct\/profile-swift.struct",
                "title" : "Response.User.Profile",
                "type" : "struct"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/user-swift.struct\/id",
                "title" : "let id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/user-swift.struct\/profile-swift.property",
                "title" : "let profile: Response.User.Profile?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/response\/user-swift.struct\/username",
                "title" : "let username: String?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/oktaidx\/response\/user-swift.struct",
            "title" : "Response.User",
            "type" : "struct"
          },
          {
            "title" : "Using Capabilities",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Classes",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/duo\/host",
                    "title" : "let host: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/duo\/script",
                    "title" : "let script: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/duo\/signaturedata",
                    "title" : "var signatureData: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/duo\/signedtoken",
                    "title" : "let signedToken: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/duo\/willproceed(to:)",
                    "title" : "func willProceed(to: Remediation)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/capability\/duo",
                "title" : "Capability.Duo",
                "type" : "class"
              }
            ],
            "path" : "\/documentation\/oktaidx\/capability",
            "title" : "Capability",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/capabilitycollection\/capabilitytype",
                "title" : "CapabilityType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/capabilitycollection\/capabilities",
                "title" : "var capabilities: [Self.CapabilityType]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/oktaidx\/capabilitycollection\/capability(_:)-3vnzn",
                        "title" : "func capability<T>(T.Type) -> T?",
                        "type" : "method"
                      }
                    ],
                    "title" : "CapabilityCollection Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/capabilitycollection\/capability(_:)-8so55",
                "title" : "func capability<T>(T.Type) -> T?",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/oktaidx\/capabilitycollection",
            "title" : "CapabilityCollection",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/oktaidx\/idxcapability\/willproceed(to:)-6y67z",
                        "title" : "func willProceed(to: Remediation)",
                        "type" : "method"
                      }
                    ],
                    "title" : "IDXCapability Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/idxcapability\/willproceed(to:)-6dgot",
                "title" : "func willProceed(to: Remediation)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/oktaidx\/idxcapability",
            "title" : "IDXCapability",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/oktaidx\/authenticatorcapability",
            "title" : "AuthenticatorCapability",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/oktaidx\/remediationcapability",
            "title" : "RemediationCapability",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/numberchallenge\/correctanswer",
                "title" : "let correctAnswer: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/numberchallenge\/willproceed(to:)",
                    "title" : "func willProceed(to: Remediation)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/capability\/numberchallenge\/idxcapability-implementations",
                "title" : "IDXCapability Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/capability\/numberchallenge",
            "title" : "Capability.NumberChallenge",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/passwordsettings\/daystoexpiry",
                "title" : "let daysToExpiry: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/passwordsettings\/excludeattributes",
                "title" : "let excludeAttributes: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/passwordsettings\/excludeusername",
                "title" : "let excludeUsername: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/passwordsettings\/minlength",
                "title" : "let minLength: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/passwordsettings\/minlowercase",
                "title" : "let minLowerCase: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/passwordsettings\/minnumber",
                "title" : "let minNumber: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/passwordsettings\/minsymbol",
                "title" : "let minSymbol: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/passwordsettings\/minuppercase",
                "title" : "let minUpperCase: Int",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/passwordsettings\/willproceed(to:)",
                    "title" : "func willProceed(to: Remediation)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/capability\/passwordsettings\/idxcapability-implementations",
                "title" : "IDXCapability Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/capability\/passwordsettings",
            "title" : "Capability.PasswordSettings",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/pollable\/ispolling",
                "title" : "var isPolling: Bool",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/pollable\/startpolling()",
                "title" : "func startPolling() async throws -> Response",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/pollable\/startpolling(completion:)",
                "title" : "func startPolling(completion: InteractionCodeFlow.ResponseResult?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/pollable\/stoppolling()",
                "title" : "func stopPolling()",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/pollable\/willproceed(to:)",
                    "title" : "func willProceed(to: Remediation)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/capability\/pollable\/idxcapability-implementations",
                "title" : "IDXCapability Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/capability\/pollable",
            "title" : "Capability.Pollable",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/profile\/values",
                "title" : "let values: [String : String]",
                "type" : "property"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/profile\/subscript(_:)",
                "title" : "subscript(String) -> String?",
                "type" : "subscript"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/profile\/willproceed(to:)",
                    "title" : "func willProceed(to: Remediation)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/capability\/profile\/idxcapability-implementations",
                "title" : "IDXCapability Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/capability\/profile",
            "title" : "Capability.Profile",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/recoverable\/recover()",
                "title" : "func recover() async throws -> Response",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/recoverable\/recover(completion:)",
                "title" : "func recover(completion: InteractionCodeFlow.ResponseResult?)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/recoverable\/willproceed(to:)",
                    "title" : "func willProceed(to: Remediation)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/capability\/recoverable\/idxcapability-implementations",
                "title" : "IDXCapability Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/capability\/recoverable",
            "title" : "Capability.Recoverable",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/sendable\/send()",
                "title" : "func send() async throws -> Response",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/sendable\/send(completion:)",
                "title" : "func send(completion: InteractionCodeFlow.ResponseResult?)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/sendable\/willproceed(to:)",
                    "title" : "func willProceed(to: Remediation)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/capability\/sendable\/idxcapability-implementations",
                "title" : "IDXCapability Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/capability\/sendable",
            "title" : "Capability.Sendable",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/resendable\/resend()",
                "title" : "func resend() async throws -> Response",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/resendable\/resend(completion:)",
                "title" : "func resend(completion: InteractionCodeFlow.ResponseResult?)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/resendable\/willproceed(to:)",
                    "title" : "func willProceed(to: Remediation)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/capability\/resendable\/idxcapability-implementations",
                "title" : "IDXCapability Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/capability\/resendable",
            "title" : "Capability.Resendable",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/socialidp\/id",
                "title" : "let id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/socialidp\/idpname",
                "title" : "let idpName: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/socialidp\/redirecturl",
                "title" : "let redirectUrl: URL",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.property",
                "title" : "let service: Capability.SocialIDP.Service",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.enum\/agentlessiwa",
                    "title" : "case agentlessIwa",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.enum\/apple",
                    "title" : "case apple",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.enum\/facebook",
                    "title" : "case facebook",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.enum\/google",
                    "title" : "case google",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.enum\/iwa",
                    "title" : "case iwa",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.enum\/linkedin",
                    "title" : "case linkedin",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.enum\/microsoft",
                    "title" : "case microsoft",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.enum\/oidc",
                    "title" : "case oidc",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.enum\/oinsocial",
                    "title" : "case oinSocial",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.enum\/okta",
                    "title" : "case okta",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.enum\/other",
                    "title" : "case other",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.enum\/saml",
                    "title" : "case saml",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.enum\/x509",
                    "title" : "case x509",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.enum\/init(string:)",
                    "title" : "init(string: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/capability\/socialidp\/service-swift.enum",
                "title" : "Capability.SocialIDP.Service",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/socialidp\/willproceed(to:)",
                    "title" : "func willProceed(to: Remediation)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/capability\/socialidp\/idxcapability-implementations",
                "title" : "IDXCapability Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/capability\/socialidp",
            "title" : "Capability.SocialIDP",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/otp\/image",
                "title" : "var image: NSImage?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/otp\/imagedata",
                "title" : "let imageData: Data",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/otp\/mimetype",
                "title" : "let mimeType: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/capability\/otp\/sharedsecret",
                "title" : "let sharedSecret: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/capability\/otp\/willproceed(to:)",
                    "title" : "func willProceed(to: Remediation)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/capability\/otp\/idxcapability-implementations",
                "title" : "IDXCapability Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/capability\/otp",
            "title" : "Capability.OTP",
            "type" : "struct"
          },
          {
            "title" : "Errors",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/idxservererror\/errordescription",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/idxservererror\/localizationkey",
                "title" : "let localizationKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/idxservererror\/message",
                "title" : "let message: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/oktaidx\/idxservererror\/severity",
                "title" : "let severity: Response.Message.Severity",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/idxservererror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/idxservererror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/idxservererror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/idxservererror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/idxservererror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/idxservererror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/idxservererror",
            "title" : "IDXServerError",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/apierror(_:)",
                "title" : "case apiError(APIClientError)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/cannotcreaterequest",
                "title" : "case cannotCreateRequest",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/internalerror(_:)",
                "title" : "case internalError(any Error)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/internalmessage(_:)",
                "title" : "case internalMessage(String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/invalidcontext",
                "title" : "case invalidContext",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/invalidflow",
                "title" : "case invalidFlow",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/invalidhttpresponse",
                "title" : "case invalidHTTPResponse",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/invalidparameter(name:)",
                "title" : "case invalidParameter(name: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/invalidparametervalue(name:type:)",
                "title" : "case invalidParameterValue(name: String, type: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/invalidrequestdata",
                "title" : "case invalidRequestData",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/invalidresponsedata",
                "title" : "case invalidResponseData",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/invalidurl",
                "title" : "case invalidUrl",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/missingrefreshtoken",
                "title" : "case missingRefreshToken",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/missingrelatedobject",
                "title" : "case missingRelatedObject",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/missingremediationoption(name:)",
                "title" : "case missingRemediationOption(name: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/missingrequiredparameter(name:)",
                "title" : "case missingRequiredParameter(name: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/oautherror(summary:code:errorid:)",
                "title" : "case oauthError(summary: String, code: String?, errorId: String?)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/parameterimmutable(name:)",
                "title" : "case parameterImmutable(name: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/platformunsupported",
                "title" : "case platformUnsupported",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/servererror(message:localizationkey:type:)",
                "title" : "case serverError(message: String, localizationKey: String, type: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/successresponsemissing",
                "title" : "case successResponseMissing",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/unknownremediationoption(name:)",
                "title" : "case unknownRemediationOption(name: String)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/==(_:_:)",
                    "title" : "static func == (InteractionCodeFlowError, InteractionCodeFlowError) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/errordescription",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/interactioncodeflowerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/oktaidx\/interactioncodeflowerror",
            "title" : "InteractionCodeFlowError",
            "type" : "enum"
          },
          {
            "title" : "Variables",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/oktaidx\/version",
            "title" : "let Version: SDKVersion",
            "type" : "var"
          },
          {
            "title" : "Extended Modules",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Extended Classes",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/oktaidx\/authfoundation\/oauth2client\/interactioncodeflow(redirecturi:additionalparameters:)",
                    "title" : "func interactionCodeFlow(redirectUri: URL, additionalParameters: [String : String]?) -> InteractionCodeFlow",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/oktaidx\/authfoundation\/oauth2client",
                "title" : "OAuth2Client",
                "type" : "extension"
              }
            ],
            "path" : "\/documentation\/oktaidx\/authfoundation",
            "title" : "AuthFoundation",
            "type" : "extension"
          }
        ],
        "path" : "\/documentation\/oktaidx",
        "title" : "OktaIdx",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 1
  }
}